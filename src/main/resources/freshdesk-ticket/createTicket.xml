<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="createTicket" xmlns="http://ws.apache.org/ns/synapse">
    <!--Required Parameters-->
    <parameter name="requesterId" description="User ID of the requester."/>
    <parameter name="email" description="Email address of the requester."/>
    <parameter name="facebookId" description="Facebook ID of the requester. "/>
    <parameter name="phone" description="Phone number of the requester."/>
    <parameter name="twitterId" description="Twitter handle of the requester."/>
    <!--Supported Parameters-->
    <parameter name="name" description="Name of the requester."/>
    <parameter name="subject" description="Subject of the ticket."/>
    <parameter name="type"
               description="Helps categorize the ticket according to the different kinds of issues your support team deals with."/>
    <parameter name="status" description="Status of the ticket."/>
    <parameter name="priority" description="Priority of the ticket."/>
    <parameter name="description" description="HTML content of the ticket."/>
    <parameter name="responderId" description="ID of the agent to whom the ticket has been assigned."/>
    <parameter name="ccEmails"
               description="Email address added in the 'cc' field of the incoming ticket email."/>
    <parameter name="customFields" description="Key value pairs containing the names and values of custom fields."/>
    <parameter name="dueBy" description="Timestamp that denotes when the ticket is due to be resolved."/>
    <parameter name="emailConfigId" description="ID of email config which is used for this ticket."/>
    <parameter name="frDueBy" description="Timestamp that denotes when the first response is due."/>
    <parameter name="groupId" description="ID of the group to which the ticket has been assigned."/>
    <parameter name="productId" description="ID of the product to which the ticket is associated."/>
    <parameter name="source" description="The channel through which the ticket was created."/>
    <parameter name="tags" description="Tags that have been associated with the ticket."/>
    <sequence>
        <property name="uri.var.requesterId" expression="$func:requesterId"/>
        <property name="uri.var.email" expression="$func:email"/>
        <property name="uri.var.facebookId" expression="$func:facebookId"/>
        <property name="uri.var.phone" expression="$func:phone"/>
        <property name="uri.var.twitterId" expression="$func:twitterId"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.subject" expression="$func:subject"/>
        <property name="uri.var.type" expression="$func:type"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.priority" expression="$func:priority"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.responderId" expression="$func:responderId"/>
        <property name="uri.var.ccEmails" expression="$func:ccEmails"/>
        <property name="uri.var.customFields" expression="$func:customFields"/>
        <property name="uri.var.dueBy" expression="$func:dueBy"/>
        <property name="uri.var.emailConfigId" expression="$func:emailConfigId"/>
        <property name="uri.var.frDueBy" expression="$func:frDueBy"/>
        <property name="uri.var.groupId" expression="$func:groupId"/>
        <property name="uri.var.productId" expression="$func:productId"/>
        <property name="uri.var.source" expression="$func:source"/>
        <property name="uri.var.tags" expression="$func:tags"/>
        <property name="uri.var.query" value=''/>
        <script language="js">
            <![CDATA[
                //request body param variables
                var email = mc.getProperty('uri.var.email');
                var facebookId = mc.getProperty('uri.var.facebookId');
                var requesterId = mc.getProperty('uri.var.requesterId');
                var description = mc.getProperty('uri.var.description');
                var subject = mc.getProperty('uri.var.subject');
                var priority = mc.getProperty('uri.var.priority');
                var status = mc.getProperty('uri.var.status');
                var phone = mc.getProperty("uri.var.phone");
                var twitterId = mc.getProperty("uri.var.twitterId");
                var name = mc.getProperty("uri.var.name");
                var ccEmails = mc.getProperty("uri.var.ccEmails");
                var customFields = mc.getProperty("uri.var.customFields");
                var dueBy = mc.getProperty("uri.var.dueBy");
                var emailConfigId = mc.getProperty("uri.var.emailConfigId");
                var frDueBy = mc.getProperty("uri.var.frDueBy");
                var groupId = mc.getProperty("uri.var.groupId");
                var productId = mc.getProperty("uri.var.productId");
                var source =mc.getProperty("uri.var.source");
                var tags = mc.getProperty("uri.var.tags");
                var query = '{';
                //query = query.concat(email);
                if (email != null && email != ""){
                    query = query.concat('"'+'email":"' + email+'",');
                }
                if (description != null && description != ""){
                    query = query.concat('"'+'description":"' + description+'",');
                }
                if (subject != null && subject != ""){
                    query = query.concat('"'+'subject":"' + subject+'",');
                }
                if (status != null && status != ""){
                    query = query.concat('"'+'status":' + status+',');
                }
                if (priority != null && priority != ""){
                    query = query.concat('"'+'priority":' + priority+',');
                }
                if (requesterId != null && requesterId != ""){
                    query = query.concat('"'+'requester_id":' + requesterId+',');
                }
                if (facebookId != null && facebookId != ""){
                    query = query.concat('"'+'facebook_id":"' + facebookId+'",');
                }
                if (twitterId != null && twitterId != ""){
                    query = query.concat('"'+'twitter_id":"' + twitterId+'",');
                }
                if (phone != null && phone != ""){
                    query = query.concat('"'+'phone":"' + phone+'",');
                }
                if (name != null && name != ""){
                    query = query.concat('"'+'name":"' + name+'",');
                }
                if (dueBy != null && dueBy != ""){
                    query = query.concat('"'+'due_by":"' + dueBy+'",');
                }
                if (frDueBy != null && frDueBy != ""){
                    query = query.concat('"'+'fr_due_by":"' + frDueBy+'",');
                }
                if (tags != null && tags != ""){
                    query = query.concat('"'+'tags":"' + tags+'"}');
                }
                if (emailConfigId != null && emailConfigId != ""){
                    query = query.concat('"'+'email_config_id":' + emailConfigId+',');
                }
                if (groupId != null && groupId != ""){
                    query = query.concat('"'+'group_id":' + groupId+',');
                }
                if (productId != null && productId != ""){
                    query = query.concat('"'+'product_id":' + productId+',');
                }
                if (source != null && source != ""){
                    query = query.concat('"'+'source":' + source+',');
                }
                if (ccEmails != null && ccEmails != "" && ccEmails!="[]") {
                    var ccEmailsArray = eval( "('" + ccEmails + "')" );
                    query = query.concat('"cc_emails":' + ccEmailsArray +',');
                }
                if (customFields != null && customFields != "" && customFields!="{}") {
                    var customFieldsArray = eval( "('" + customFields + "')" );
                    query = query.concat('"custom_fields":' + customFieldsArray +',');
                }
                query = query.substring(0, query.length-1);
                mc.setProperty('uri.var.query', query);
            ]]>
        </script>
        <payloadFactory media-type="json">
            <format>
                $1}
            </format>
            <args>
                <arg expression="$ctx:uri.var.query"/>
            </args>
        </payloadFactory>
        <property name="messageType" value="application/json" scope="axis2"/>
        <filter source="$ctx:freshdeskBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="post" uri-template="{uri.var.apiUrl}/api/{+uri.var.apiVersion}/tickets"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="post" uri-template="{uri.var.apiUrl}/api/{+uri.var.apiVersion}/tickets"/>
                    </endpoint>
                </call>
            </else>
        </filter>
        <!-- Remove response custom header information -->
        <header name="X-Runtime" scope="transport" action="remove"/>
        <header name="X-Powered-By" scope="transport" action="remove"/>
    </sequence>
</template>